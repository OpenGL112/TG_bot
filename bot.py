from email.message import Message
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime
from calendar import monthcalendar, month_name
from dotenv import load_dotenv
import asyncio
import db
from db import cancel_slot

load_dotenv()
API_TOKEN = "7062809410:AAFy6p7oSkNF11FDC7sa7fXmfCIrxbIlcBM"
ADMIN_ID = int("308099810")


bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


# FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–≥–∞–º–∏
class Booking(StatesGroup):
    choosing_service = State()
    refining_service = State()
    choosing_date = State()
    choosing_time = State()
    main_menu = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def generate_calendar(year: int, month: int) -> InlineKeyboardMarkup:
    current_date = datetime.now().date()  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    calendar = monthcalendar(year, month)
    keyboard = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    header_row = [
        InlineKeyboardButton(
            text=f"{month_name[month]} {year}",
            callback_data="ignore"
        )
    ]
    keyboard.append(header_row)

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    header = [
        InlineKeyboardButton(text="–ü–Ω", callback_data="ignore"),
        InlineKeyboardButton(text="–í—Ç", callback_data="ignore"),
        InlineKeyboardButton(text="–°—Ä", callback_data="ignore"),
        InlineKeyboardButton(text="–ß—Ç", callback_data="ignore"),
        InlineKeyboardButton(text="–ü—Ç", callback_data="ignore"),
        InlineKeyboardButton(text="–°–±", callback_data="ignore"),
        InlineKeyboardButton(text="–í—Å", callback_data="ignore"),
    ]
    keyboard.append(header)

    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    for week in calendar:
        week_buttons = []
        for day in week:
            if day == 0:  # –ü—É—Å—Ç—ã–µ –¥–Ω–∏
                week_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                date = datetime(year, month, day).date()
                if date < current_date:
                    # –î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º: –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                    week_buttons.append(InlineKeyboardButton(text=f"üîí {day}", callback_data="ignore"))
                else:
                    # –î–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
                    week_buttons.append(InlineKeyboardButton(text=str(day), callback_data=f"date_{year}_{month}_{day}"))
        keyboard.append(week_buttons)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    navigation = [
        InlineKeyboardButton(text="<", callback_data=f"prev_1_{year}_{month}"),
        InlineKeyboardButton(text=">", callback_data=f"next_1_{year}_{month}"),
    ]
    keyboard.append(navigation)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.callback_query(F.data.startswith("next_1_"))
async def handle_next_1(callback_query: types.CallbackQuery):
    _, year, month = map(int, callback_query.data.split("_")[1:])
    month += 1
    if month > 12:
        year += month // 12
        month = month % 12
    calendar = generate_calendar(year, month)
    await callback_query.message.edit_reply_markup(reply_markup=calendar)

@dp.callback_query(F.data.startswith("prev_1_"))
async def handle_prev_1(callback_query: types.CallbackQuery):
    _, year, month = map(int, callback_query.data.split("_")[1:])
    month -= 1
    if month < 1:
        month = 12
        year -= 1
    calendar = generate_calendar(year, month)
    await callback_query.message.edit_reply_markup(reply_markup=calendar)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_start_menu(message_or_callback, state: FSMContext):
    services = ["–£—Å–ª—É–≥–∏", "–ú–æ–∏ –∑–∞–ø–∏—Å–∏", "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"]
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=service, callback_data=f"service_{service}")] for service in services
    ])
    builder.inline_keyboard.append([InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞", url = "https://www.google.com")])
    builder.inline_keyboard.append([InlineKeyboardButton(text="–í—ã—Ö–æ–¥", callback_data="exit")])

    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer("–°–µ—Ä–≤–∏—Å—ã:", reply_markup=builder)
    elif isinstance(message_or_callback, types.CallbackQuery):
        await message_or_callback.message.delete()
        await message_or_callback.message.answer("–°–µ—Ä–≤–∏—Å—ã:", reply_markup=builder)

    await state.set_state(Booking.choosing_service)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
@dp.callback_query(F.data == "exit")
async def handle_exit(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await state.clear()
    await show_start_menu(callback_query, state)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await show_start_menu(message, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
@dp.callback_query(F.data.startswith("service_"))
async def handle_service(callback_query: types.CallbackQuery, state: FSMContext):
    service = callback_query.data.split("_")[1]
    await state.update_data(service=service)

    if service == "–£—Å–ª—É–≥–∏":
        options = ["–°—Ç—Ä–∏–∂–∫–∞", "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ", "–£–∫–ª–∞–¥–∫–∞", "–ù–∞–∑–∞–¥"]
        builder = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=option, callback_data=f"refine_{option}")]
            for option in options
        ])
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=builder)
        await state.set_state(Booking.refining_service)

    if service == "–ú–æ–∏ –∑–∞–ø–∏—Å–∏":
        user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_query
        await my_bookings(callback_query.message,user_id)
        await callback_query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–∫–∞–∑–∞–ª –æ—à–∏–±–∫—É
    elif service == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å":
        user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_query
        await cancel_bookings(callback_query.message, user_id)
    elif service == "–°—Å—ã–ª–∫–∞":
        await show_help(callback_query.message)
    else:
        pass

# –£—Ç–æ—á–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
@dp.callback_query(F.data.startswith("refine_"))
async def handle_refine_service(callback_query: types.CallbackQuery, state: FSMContext):
    refinement = callback_query.data.split("_")[1]

    if refinement == "–ù–∞–∑–∞–¥":
        await show_start_menu(callback_query, state)
    else:
        pass
        await state.update_data(refinement=refinement)
        today = datetime.now()
        calendar = generate_calendar(today.year, today.month)
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar)
        await state.set_state(Booking.choosing_date)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@dp.callback_query(F.data.startswith("date_"))
async def handle_date(callback_query: types.CallbackQuery, state: FSMContext):
    _, year, month, day = callback_query.data.split("_")
    selected_date = f"{year}-{str(month).zfill(2)}-{str(day).zfill(2)}"
    await state.update_data(date=selected_date)

    data = await state.get_data()
    service = data["refinement"]
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    available_slots = await db.get_available_slots(service, selected_date)
    if not available_slots:
        await callback_query.message.answer("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{time}", callback_data=f"slot_{slot_id}")]
        for slot_id, time in available_slots
    ])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
    await state.set_state(Booking.choosing_time)


# –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
@dp.callback_query(F.data == "cancel")
async def handle_cancel(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.")
    await state.clear()
    await show_start_menu(callback_query, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def show_help(message: types.Message):
    help_text = (
        "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏\n"
        "/help - –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n"
        "/my_bookings - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    await message.answer(help_text)


# –ö–æ–º–∞–Ω–¥–∞ /my_bookings
@dp.message(Command("my_bookings"))
async def my_bookings(message: types.Message, user_id):

    last_bookings = await db.get_last_bookings(user_id, limit=3)

    if not last_bookings:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
        return

    response = "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    for booking in last_bookings:
        # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å—ã, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂
        response += (
            f"–£—Å–ª—É–≥–∞: {booking[0]}\n"  # service
            f"–î–∞—Ç–∞: {booking[1]}\n"    # date
            f"–í—Ä–µ–º—è: {booking[2]}\n\n" # time
        )

    await message.answer(response)


# –ö–æ–º–∞–Ω–¥–∞ /cancel_bookings
@dp.message(Command("cancel_bookings"))
async def cancel_bookings(message: types.Message, user_id):

    counter = 0
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_bookings = await db.get_last_bookings(user_id, limit=3)
    d = datetime.today()

    # –ï—Å–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç
    if not last_bookings:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "–ö–∞–∫–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å?:\n\n"
    has_active_bookings = False  # –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π

    for booking in last_bookings:
        booking_date = datetime.strptime(booking[1], '%Y-%m-%d').date()

        if booking_date >= d.date():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç—É–∞–ª—å–Ω–æ –ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            has_active_bookings = True
            counter += 1
            response += (
                f"–£—Å–ª—É–≥–∞: {booking[0]}\n"  # service
                f"–î–∞—Ç–∞: {booking[1]}\n"  # date
                f"–í—Ä–µ–º—è: {booking[2]}\n\n"  # time
            )

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    if has_active_bookings:
        await message.answer(response)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("slot_"))
async def handle_time_and_finish(callback_query: types.CallbackQuery, state: FSMContext):
    slot_id = int(callback_query.data.split("_")[1])
    user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_query
    await db.book_slot(slot_id, user_id)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    data = await state.get_data()
    service = data["refinement"]
    date = data["date"]
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É: {service}\n–î–∞—Ç–∞: {date}\n–°–ø–∞—Å–∏–±–æ!"
    )

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
    link = f'<a href="tg://user?id={user_id}">–ó–∞–∫–∞–∑—á–∏–∫</a>'

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(
        ADMIN_ID,
        f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n–£—Å–ª—É–≥–∞: {service}\n–î–∞—Ç–∞: {date}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback_query.from_user.full_name}"
        f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: {link}", parse_mode="HTML"
    )


    await state.clear()
    await show_start_menu(callback_query, state)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def on_startup():
    await db.init_db()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(on_startup())
    asyncio.run(main())